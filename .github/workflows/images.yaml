---
name: Create and publish Docker images

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  schedule:
    - cron: '0 2 * * 2,5'
  workflow_dispatch:

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Get jellyfin version
        run: |
          version=$(curl -sX GET "https://api.github.com/repos/jellyfin/jellyfin/releases/latest" | jq --raw-output '. | .tag_name' 2>/dev/null)
          version="${version#*v}"
          version="${version#*release-}"
          echo "JF_VERSION=$version" >> $GITHUB_ENV

      - name: Get jellyfin version
        run: |
          version=$(cat images/port_manager/gluetun-port-mgr/Cargo.toml | grep -E "^version" | awk '{print $3}' | sed 's/"//g')
          echo "PORT_MGR_VERSION=$version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c # v3

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5
        with:
          file: images/jellyfin/Dockerfile
          context: ./images/jellyfin
          push: true
          build-args: |
            VERSION=${{ env.JF_VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/jellyfin:${{ env.JF_VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository }}/jellyfin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5
        with:
          file: images/port_manager/Dockerfile
          context: ./images/port_manager
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/gtpm:${{ env.PORT_MGR_VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository }}/gtpm:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
